###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element){
	$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}){
	$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}:${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) ,,{
	${0:// body...}
};

endsnippet

snippet for "for-in (object)" b
/* eslint-disable fp/no-loops */
/* eslint-disable no-restricted-syntax */
/* eslint-disable guard-for-in */
for (const key in $0) {
}
endsnippet

snippet for "for-of (array)" b
/* eslint-disable fp/no-loops */
/* eslint-disable no-restricted-syntax */
/* eslint-disable guard-for-in */
for (const item of $0) {
}
endsnippet

snippet for "for-of (array with index)" b
/* eslint-disable fp/no-loops */
/* eslint-disable no-restricted-syntax */
/* eslint-disable guard-for-in */
for (const [i, item] of $0.entries()) {
}
endsnippet

snippet trx "knex transaction" b
await knex.transaction(async trx => {
	await trx
});
endsnippet

snippet /fun/ "function (fun)" r
function ${1:function_name}(${2:argument}) {
	$0
}
endsnippet

snippet ife "if ___ else"
if (${1:true}) {$0} else{}
endsnippet

snippet if "if"
if (${1:true}) {$0}
endsnippet

snippet setTimeout "setTimeout function"
setTimeout(() => {
	${VISUAL}$0
}, ${1:10});
endsnippet

snippet setInterval "setInterval function"
setInterval(() => {
	$0
}, ${1:10});
endsnippet

# vim:ft=snippets:

snippet /.forEach/ "Array.forEach" r
.forEach((${1:e}) => {
  $0
})
endsnippet

snippet /.each/ "jquery each" r
.each((i, node) => {
	$0
})
endsnippet

snippet /.map/ "jquery map" r
.map((i, node) => {
	$0
})
endsnippet

snippet cl "console.log" b
console.log($0);
endsnippet

snippet cj "console.log json dump" b
console.log(JSON.stringify($0, null, 2));
endsnippet

snippet { "{}"
{
  $0
}
endsnippet

snippet debug "debugger" b
debugger;
endsnippet

snippet + "+ xxx +"
+ $0 +
endsnippet

snippet clt "console log time" b
console.log(new Date());
endsnippet

snippet view "Ember view" b
${1:App}.${2:View} = Ember.View.extend({
  templateName: '$2',
  $0
});
endsnippet

snippet ngd "angular directive" b
.directive('${1:tagName}', function() {
  return {
    restrict: 'E',
    scope: {
      name: 'bind'
    },
    templateUrl: '/partials/$1.html',
  }
})$0
endsnippet

snippet ngc "angular controller" b
function ${1:Application}Ctrl($scope${2:, $routeParams}) {
  $0
}
endsnippet

snippet ngs "angular service" b
.factory('${1:service}', function() {
  return function(${2:params}) {
    $0
  };
})
endsnippet

snippet ngf "angular factory" b
.factory('${1:name}', function(${2:$resource}) {
  $0
})
endsnippet

snippet ngca "angular controller action" b
$scope.${1:action} = function(${2:params}) {
  $0
}
endsnippet

snippet _map "_.map" b
_.map(${1:array}, function(${2:item}) {
  $0
});
endsnippet

snippet $ "jquery selector"
$("${0:${VISUAL}}")
endsnippet

snippet httppost "Angular http post" b
$http.post(${1:url('')}, ${2:data})
  .success(function(data, status) {
    $0
  })
  .error(function(data, status) {
    alert('failed to submit because ' + data);
  });
endsnippet

snippet ajax "Ajax get JSON" b
$.ajax({
  url: $1,
  type: 'GET',
  dataType: 'json',
  success: function(data) {
    $0
  },
});
endsnippet

snippet var "var definition" b
var ${1:name} = ${VISUAL};$0
endsnippet

snippet try "try catch throw" b
try {
  ${VISUAL}$0
} catch (err) {
  debugger;
}
endsnippet

snippet watch "angular scope watch" b
$scope.$watch("${1:variable}", function(newValue, oldValue) {
  $0
}${2:, true});
endsnippet

snippet directive "angular directive" b
app.directive('${1:name}', function() {
  return {
    require: '?ngModel',
    link: function(scope, element, attrs, controller) {
      $0
    }
  }
});
endsnippet

snippet /filter/ "angular filter" r
filter('$1', function() {
  return function(input) {
    return $0
  }
});
endsnippet

snippet /\.on/ "jquery on" r
.on('${1:click}', '$0', (e) => {
  const $node = $(e.currentTarget);
});
endsnippet

snippet //= "//= require" b
//= require vendor/$0
endsnippet

snippet head "header" b
//
// Author: Loki Ng
// Date: `date +"%d %B %Y"`
//
endsnippet

snippet al "alert" b
alert($0);
endsnippet

snippet ready "jquery on ready" b
$(function() {
	$0
});
endsnippet

snippet sleep "sleep for x milliseconds" b
var start = new Date().getTime();
while(1) {
	if ((new Date().getTime() - start) > ${1:3000}){ break; }
}
endsnippet

snippet pry "debugger" b
debugger;
endsnippet

snippet /:f/ "xxx: function() {...}" r
: function() {
	$0
},
endsnippet

snippet prompt "prompt"
prompt(${1:message}, ${0:default});
endsnippet

snippet jshint "jshint globals" b
/*globals $0*/
endsnippet

snippet on "body on" b
$('body').on('${1:click}', '$2', $0);
endsnippet

snippet /\.every/ "every" r
.every(function($1) {
	$0
	return true;
});
endsnippet

snippet then "casper then" b
casper.then(function() {
	$0
});
endsnippet

snippet // "JSX comment" b
{/* ${VISUAL} */}
endsnippet

# wonderful snippets
# https://medium.com/brigade-engineering/sharpen-your-vim-with-snippets-767b693886db#.ligvyaxfe
snippet im "Import" b
import `!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	if lastPart == 'underscore':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return re.sub(r'[_\-]', '', lastPart.title())
snip.rv = formatVariableName(t[1])
` from '${1}'$0
endsnippet

snippet imb "import bootstrap" b
import { Button, Input } from 'react-bootstrap'
endsnippet

snippet re "require" b
endsnippet

snippet xstyle "JSX Style"
style={{$0}}
endsnippet

snippet xfb "JSX Material UI Flat Button"
<FlatButton secondary={false} label="$1"
	onClick={() => { this.props.pushState(null, '/') }} />
endsnippet

snippet rcont "new redux container" b
import React, { Component, PropTypes } from 'react'
import { connect } from 'react-redux'

class $1 extends Component {
  constructor(props) {
    super(props)
  }

  render() {
    return (
      <div>hello</div>
    )
  }
}

$1.propTypes = {
}

function mapStateToProps(state) {
  return {}
}

export default connect(mapStateToProps, {
})($1)
endsnippet

snippet rcomp "Component" b
import React, { Component, PropTypes } from 'react'

export default class $1 extends Component {
  render() {
    return (
      <div className="$1">
      </div>
    )
  }
}

$1.propTypes = {
  `!p
a = t[1]
if a == '':
	snip.rv = a
else:
	snip.rv = a[0].lower() + a[1:]
`: PropTypes.shape({
    login: PropTypes.string.isRequired,
    name: PropTypes.string
  }).isRequired
}
endsnippet

snippet br "br" b
<br />
endsnippet

snippet hr "hr" b
<hr />
endsnippet

snippet /fa/ "fa icon" r
<i className="fa fa-$0" />
endsnippet

snippet pj "pretty json" b
import PrettyJSON from '../components/PrettyJSON'
<PrettyJSON obj={$0} />
endsnippet

snippet todo "todo" b
// @TODO loki, `date +"%d/%m/%Y"`: $0
endsnippet

snippet fixme "fixme" b
// @FIXME loki, `date +"%d/%m/%Y"`: $0
endsnippet

snippet /\.find/ "find" r
.find(function(item) {
	return item > 1
})
endsnippet

snippet promise "new Promise" b
return new Promise((resolve, reject) => {
	$0
})
endsnippet

snippet onclick "on click" b
$body.on('click.$1', '[data-$1]', (e) => {
	const $this = $(e.currentTarget);
	$this.data('$1')
});
endsnippet

snippet onc "on click" b
onClick('$1', (e) => {
	const $this = $(e.currentTarget);
	$this.data('$1')
	$0
})
endsnippet

snippet dragable "mousedown" b
$body.on('mousedown.$1', '.scale-handle', (e) => {
	$body.on('mousemove.$1', (me) => {
	})
	$(document).on('mouseup.$1', (e) => {
		$body.off('mousemove.$1')
		$(document).off('mouseup.$1')
	})
	return false
})
endsnippet

snippet jmap "mapnode" b
const output = R.pipe(
	R.map($),
	R.map(($node) => {
		return $node.data('idx')
	})
)($('[$0]', $body).toArray())
endsnippet

snippet ppry "pry in R.pipe" b
(data) => { debugger; return data },
endsnippet

snippet pdebug "debugger in R.pipe" b
(s) => { debugger; s },
endsnippet

snippet lo "logObject" b
logObject('$1', $1)
endsnippet

snippet lt "log time" b
console.log(\`$0 - ${new Date() - st}ms\`); st = new Date()
endsnippet

snippet eslint "eslint-disable" b
/* eslint-disable $0 */
endsnippet

snippet pret "prettier-ignore" b
// prettier-ignore
endsnippet

snippet get "express.js get" b
router.get(
	"/$1",
	asyncRoute(async (req, res) => {
		$0
		renderUID(req, res, "Title", "mixinName", {});
	})
);
endsnippet

snippet post "express.js post" b
router.post(
	"/$1",
	asyncRoute(async (req, res) => {
		$0
		req.flash("info", "Data updated");
		res.redirect("back");
	})
);
endsnippet

snippet use "express.js use" b
router.use(
	asyncRoute(async (req, res, next) => {
		next();
	})
);
endsnippet

snippet knex "knex" b
const {rows: $1} = await knex.raw(\`
	select
		*
	from table
\`);
endsnippet

snippet knex "knex with params" b
const {rows: $1} = await knex.raw(
	\`
		-- expand
		-- id: 'coll-1'
		select
			*
		from table
		where id = :id
	\`,
	{id: req.params.id},
);
endsnippet


snippet pcl "log in pipe" b
$debug => { console.log($debug); return $debug },
endsnippet

snippet onClick "naf on click" b
onClick("add", async (data, $node) => {
});
endsnippet

snippet onChange "naf on click" b
onChange("add", async (data, $node) => {
});
endsnippet

snippet ben "benchmark" b
window._marks = (window._marks || []).concat([["`!v line(".")`", new Date - (window._ts || new Date)]]); window._ts = new Date;
endsnippet

snippet benp "bench print" b
console.table(window._marks);
endsnippet

snippet time "console.time" b
console.time("$1");
${VISUAL}
console.timeEnd("$1");
endsnippet

snippet co "console log object" b
console.log('$1', $1);
endsnippet


snippet tran "knex transaction" b
await knex.transaction(async trx => {
	$0
});
endsnippet

snippet pgfn "postgres fn" b
/* \`
	select plus1(102)
\` */
await knex.raw(\`
	create or replace function plus1(s int) returns int as $$
		select s + 1
	$$ language sql
\`);
endsnippet

snippet pginsert "postgres insert" b
insert into user_profile (name, email) values
('loki', 'loki@email.com'),
('queen', 'queen@email.com')
returning id
endsnippet

snippet tableext "tableExt" b
const table = await H.tableExt({
	req,
	options: {
		id: "t",
		sortable: ["name", "state"],
		sort: ["_created_at", "asc"],
		filterable: {
			name: "freetext",
			state: "select",
		},
	},
	sql: \`
		-- expand
		-- accountId: 'cus001'
		select
			name as name,
			created_at as _created_at,
			1 as actions
		from user_profile
		where account_id = :accountId
	\`,
	sqlParams: {accountId: req.account.id},
});
endsnippet


snippet pgdo "postgres do block" b
\`
	do $$
		declare some_val int;
		begin
			select 1 into some_val;
			raise notice 'some_val = (%)', some_val;
		end
	$$
\`
endsnippet

snippet pglog "postgres log" b
raise notice '$1 = %', $1;
endsnippet

snippet pgif "postgres if" b
if a then
elsif b then
else
end if;
endsnippet

snippet pgcase "postgres case" b
case
	when condition_1 then result_1
	else else_result
end
endsnippet

snippet mw "middleware" b
const $0 = asyncRoute(async (req, res, next) => {
	next();
});
endsnippet

snippet table "new table" b
// ${1:user} table
await knex.schema.createTable("$1", (table) => {
	table.string("id").primary();
});
await autoId("$1");
await autoUpdatedAt("$1");
// down
await knex.schema.dropTableIfExists("$1");
endsnippet

snippet cond "cond" b
R.cond([
	[R.equals(1), R.identity],
	[R.T, R.T],
]),
endsnippet

snippet /pipe/ "ramda pipe" r
R.pipe(
	$0
)
endsnippet

snippet m "ramda map"
R.map($0),
endsnippet

snippet pluck "ramda pluck"
R.pluck($0),
endsnippet

snippet rif "ifElse" b
R.ifElse(
	R.equals(1),
	R.T,
	R.F,
),
endsnippet

snippet sql "sql" b
/* \`
	select $0
\` */
endsnippet

snippet jsonb_@> "@> - check if contain" b
'{"a":1, "b":2}'::jsonb @> '{"b":2}'::jsonb
endsnippet

snippet jsonb_? "? - check if exists" b
'{"a":1, "b":2}'::jsonb ? 'b'
endsnippet

snippet jsonb_?| "?| - check if any exists" b
'{"a":1, "b":2, "c":3}'::jsonb ?| array['b', 'd']
endsnippet

snippet jsonb_?& "?& - check if all exists" b
'["a", "b", "c"]'::jsonb ?& array['a', 'b']
endsnippet

snippet jsonb_|| "|| - concat" b
'["a", "b"]'::jsonb || '["a", "d"]'::jsonb
endsnippet

snippet jsonb_- "- - delete one / many" b
'{"a": "b", "c": "d"}'::jsonb - 'a'
'{"a": "b", "c": "d"}'::jsonb - array['a', 'b']
endsnippet

snippet jsonb_#- "#- - delete by path" b
'["a", {"b":1}]'::jsonb #- '{1,b}'
endsnippet

snippet jsonb_@? "@? - check exists by jsonpath" b
'{"a":[1,2,3,4,5]}'::jsonb @? '$.a[*] ? (@ > 2)'
endsnippet

snippet jsonb_@@ "@@ - run jsonpath predicate" b
'{"a":[1,2,3,4,5]}'::jsonb @@ '$.a[*] > 2'
endsnippet

snippet jsonb_to "to_jsonb - anyelement to json" b
to_jsonb($0)
endsnippet

snippet jsonb_build_object "jsonb_build_object - build json" b
jsonb_build_object('key1', 'value1')
endsnippet

snippet jsonb_array_elements "jsonb_array_elements - json to rows" b
select * from jsonb_array_elements('[1,true, [2,false]]')
select * from jsonb_array_elements_text('["foo", "bar"]')
endsnippet

snippet jsonb_to_recordset "jsonb_to_recordset" b
jsonb_to_recordset(:jsonb) as r(name string, price int)
endsnippet

snippet jsonb_array_length "jsonb_array_length - build json" b
jsonb_array_length($0)
endsnippet

snippet jsonb_each "jsonb_each - json obj (kv pair) to rows" b
select * from jsonb_each('{"a":"1", "b":"2"}')
select * from jsonb_each_text('{"a":"1", "b":"2"}')
endsnippet

snippet jsonb_extract_path "jsonb_extract_path - get with variadic path" b
jsonb_extract_path('{"a":{"b":1}}', 'a', 'b')
jsonb_extract_path_text('{"a":{"b":1}}', 'a', 'b')
endsnippet

snippet jsonb_object_keys "jsonb_object_keys - get keys" b
jsonb_object_keys($0)
endsnippet

snippet jsonb_set "jsonb_set - update json by path" b
jsonb_set('[{"a":1}]', '{0,a}', '[2,3,4]')
endsnippet

snippet jsonb_insert "jsonb_insert - insert element to json array" b
jsonb_insert('{"a": [0,2,3]}', '{a, 1}'::text[], '1')
endsnippet

snippet jsonb_move "jsonb_move - insert element within jsonb array" b
jsonb_move('[0, 1, 2, 3, 4, 5, 6]'::jsonb, 2, 4)
endsnippet

snippet jsonb_strip_nulls "jsonb_strip_nulls - remote nulls (object only)" b
jsonb_strip_nulls('{"a":1, "b":null}')
endsnippet

snippet jsonb_path_exists "jsonb_path_exists - check if exists by jsonpath and a json parameters" b
jsonb_path_exists('{"a":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{"min":2, "max":4}')
endsnippet

snippet jsonb_path_match "jsonb_path_match - check jsonpath predicate with a json parameters" b
jsonb_path_match('{"a":[1,2,3,4,5]}', 'exists($.a[*] ? (@ >= $min && @ <= $max))', '{"min":2, "max":4}')
endsnippet

snippet jsonb_path_query "jsonb_path_query - get by jsonpath and a json parameters" b
jsonb_path_query('{"a":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{"min":2, "max":4}')
	#=> rows
jsonb_path_query_array #=> jsonb array
jsonb_path_query_first #=> first match
endsnippet

snippet jsonb_agg "jsonb_agg - aggregate as jsonb array" b
jsonb_agg($0)
endsnippet

snippet jsonb_object_agg "jsonb_object_agg - aggregate as jsonb object" b
jsonb_object_agg($0, $1)
endsnippet

snippet newtable "knex new table" b
// $1 table
await knex.schema.createTable("$1", (table) => {
	table.string("id").primary();
	table.string("name").notNull().unique();
	table.string("account_id").references("account.id").notNull();
	table.string("state");
	table.timestamp("created_at").defaultTo(knex.fn.now());
	table.timestamp("updated_at").defaultTo(knex.fn.now());
});
await autoId(knex, "$1");
await autoUpdatedAt(knex, "$1");

await knex.schema.dropTableIfExists("$1");
endsnippet

snippet aa "anonymous async (for testing js)" b
const fn1 = async () => {
	$0
	return 123;
};
fn1().then(console.log);
endsnippet

snippet reduce "ramda reduce" b
R.reduce((arr, item) => R.append(item, arr), [], [1, 2, 3, 4])
endsnippet

snippet dev "eslint disable import" b
/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable no-unused-vars */
/* eslint-disable no-debugger */
/* eslint-disable no-useless-concat */
/* eslint-disable no-unreachable */
endsnippet

snippet jq "enable jq write functions" b
/* eslint-disable jquery/no-class, jquery/no-val */
/* eslint-disable jquery/no-attr, jquery/no-prop, jquery/no-css */
/* eslint-disable jquery/no-text, jquery/no-html, jquery/no-ready, jquery/no-submit */
endsnippet

snippet test "jest expect" b
expect($1).toStrictEqual($0);
endsnippet

snippet Async "crocks Async" b
Async((rej, res) => {
	$0
});
endsnippet

snippet trace "trace" b
const trace = (x) => {
	console.log(x.constructor ? `${x}` : x);
	return x;
};
endsnippet

snippet / curry/ "Crocks curry function" r
 curry(() => {
  $0
});
endsnippet

snippet unreach "eslint unreach" b
/* eslint-disable no-unreachable */
endsnippet

snippet nav "navframe response" b
res.json({
	nav: {
		frame: "your-frame-name",
		mixin: "generic-msg",
		baseUrl: req.baseUrl,
		flashes: H.allFlashes(req),
	},
	msg: true ? "Done" : "Failed",
});
endsnippet

snippet seed "seed" b
const {$1} = await readRecordsFromYAML("initial-table-$1.yaml");
await knex("$1").insert($1);
endsnippet

snippet readyaml "readyaml" b
const data = yaml.safeLoad(
  fs.readFileSync("notes/stripe.invoice.payment_succeeded.txt", "utf8"),
  {}
);
console.log(data);
endsnippet

snippet values "b" b
select
	*
from (values
	(1, 'one'),
	(2, 'two')
) as t (num,letter)
endsnippet

snippet delay "delay def and call" b
const delay = (ms) => new Promise((resolve) => {setTimeout(resolve, ms)});
await delay(500);
endsnippet

snippet `` "sql test" b
/* \`
	-- expand
	select 1$0
\` */
endsnippet

snippet rec "record obj"
recordObj(${VISUAL})$0
endsnippet

snippet throw "throw error" b
/* eslint-disable no-unreachable */
throw new Error("$0");
endsnippet

snippet pgtest "A quick playground for postgres" b
console.log(\`
	drop table if exists testtbl;
	create table testtbl (
		name text,
		price int
	);
	insert into testtbl (name, price) values ('apple', '123');
	select * from testtbl
\`);
console.log(\`
	alter table testtbl drop column price
\`);
endsnippet

snippet pg "pg test with console.log" b
console.log(\`
	-- expand
	with recursive t as (
		select 1 as i
		union
		select i + 1 from t where i < 10
	)
	select i from t
\`);
endsnippet

snippet pgmvtest "pg mv test" b
console.log(\`
  drop materialized view if exists testmv;
  create materialized view testmv as
  select * from jsonb_to_recordset('[{"name":"apple","price":100}, {"name":"orange","price":200}]'::jsonb) as r(name text, price integer);
\`);
console.log(\`
  select * from testmv group by name
\`);
endsnippet
